{"ast":null,"code":"import axios from 'axios';\nimport { API_NOTIFICATION_MESSAGES, SERVICE_URLS } from './config';\nimport { getType } from './utils';\nconst API_URL = 'http://localhost:8000';\nexport const axiosInstance = axios.create({\n  baseURL: API_URL,\n  timeout: 30000\n});\naxiosInstance.interceptors.request.use(function (config) {\n  if (config.TYPE.params) {\n    config.params = config.TYPE.params;\n  } else if (config.TYPE.query) {\n    config.url = config.url + '/' + config.TYPE.query;\n  }\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(function (response) {\n  // Stop global loader here\n  return processResponse(response);\n}, function (error) {\n  // Stop global loader here\n  return Promise.reject(ProcessError(error));\n});\n\n///////////////////////////////\n// If success -> returns { isSuccess: true, data: object }\n// If fail -> returns { isFailure: true, status: int, msg: string }\n//////////////////////////////\nconst processResponse = response => {\n  if ((response === null || response === void 0 ? void 0 : response.status) === 200) {\n    return {\n      isSuccess: true,\n      data: response.data\n    };\n  } else {\n    return {\n      isFailure: true,\n      status: response === null || response === void 0 ? void 0 : response.status,\n      msg: response === null || response === void 0 ? void 0 : response.msg\n    };\n  }\n};\n\n///////////////////////////////\n// If success -> returns { isSuccess: true, data: object }\n// If fail -> returns { isError: true, status: string, msg: string, code: int }\n//////////////////////////////\nconst ProcessError = async error => {\n  if (error.response) {\n    console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.responseFailure,\n      code: error.response.status\n    };\n  } else if (error.request) {\n    console.log(\"ERROR IN REQUEST: \", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.requestFailure,\n      code: \"\"\n    };\n  } else {\n    console.log(\"NETWORK ERROR: \", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.networkError,\n      code: \"\"\n    };\n  }\n};\n_c = ProcessError;\nconst API = {};\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\n  API[key] = (body, showUploadProgress, showDownloadProgress) => axiosInstance({\n    method: value.method,\n    url: value.url,\n    data: value.method === 'DELETE' ? {} : body,\n    TYPE: getType(value, body),\n    onUploadProgress: function (progressEvent) {\n      if (showUploadProgress) {\n        let percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        showUploadProgress(percentCompleted);\n      }\n    },\n    onDownloadProgress: function (progressEvent) {\n      if (showDownloadProgress) {\n        let percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        showDownloadProgress(percentCompleted);\n      }\n    }\n  });\n}\nexport { API };\nvar _c;\n$RefreshReg$(_c, \"ProcessError\");","map":{"version":3,"names":["axios","API_NOTIFICATION_MESSAGES","SERVICE_URLS","getType","API_URL","axiosInstance","create","baseURL","timeout","interceptors","request","use","config","TYPE","params","query","url","error","Promise","reject","response","processResponse","ProcessError","status","isSuccess","data","isFailure","msg","console","log","toJSON","isError","responseFailure","code","requestFailure","networkError","_c","API","key","value","Object","entries","body","showUploadProgress","showDownloadProgress","method","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","onDownloadProgress","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/WebD projects/MERN_MACHINE_TEST/client/src/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { API_NOTIFICATION_MESSAGES, SERVICE_URLS } from './config';\r\nimport { getType } from './utils';\r\n\r\nconst API_URL = 'http://localhost:8000';\r\n\r\nexport const axiosInstance = axios.create({\r\n    baseURL: API_URL,\r\n    timeout: 30000\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n    function(config) {\r\n        if(config.TYPE.params) {\r\n            config.params = config.TYPE.params;\r\n        } else if(config.TYPE.query) {\r\n            config.url = config.url + '/' + config.TYPE.query;\r\n        }\r\n        return config;\r\n    },\r\n    function(error) {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\naxiosInstance.interceptors.response.use(\r\n    function(response) {\r\n        // Stop global loader here\r\n        return processResponse(response);\r\n    },\r\n    function(error) {\r\n        // Stop global loader here\r\n        return Promise.reject(ProcessError(error));\r\n    }\r\n);\r\n\r\n///////////////////////////////\r\n// If success -> returns { isSuccess: true, data: object }\r\n// If fail -> returns { isFailure: true, status: int, msg: string }\r\n//////////////////////////////\r\nconst processResponse = (response) => {\r\n    if (response?.status === 200) {\r\n        return { isSuccess: true, data: response.data }\r\n    } else {\r\n        return {\r\n            isFailure: true,\r\n            status: response?.status,\r\n            msg: response?.msg\r\n        }\r\n    }\r\n}\r\n\r\n///////////////////////////////\r\n// If success -> returns { isSuccess: true, data: object }\r\n// If fail -> returns { isError: true, status: string, msg: string, code: int }\r\n//////////////////////////////\r\nconst ProcessError = async (error) => {\r\n    if (error.response) {\r\n        console.log(\"ERROR IN RESPONSE: \", error.toJSON());\r\n        return {\r\n            isError: true,\r\n            msg: API_NOTIFICATION_MESSAGES.responseFailure,\r\n            code: error.response.status\r\n        }\r\n    } else if (error.request) {\r\n        console.log(\"ERROR IN REQUEST: \", error.toJSON());\r\n        return {\r\n            isError: true,\r\n            msg: API_NOTIFICATION_MESSAGES.requestFailure,\r\n            code: \"\"\r\n        }\r\n    } else {\r\n        console.log(\"NETWORK ERROR: \", error.toJSON());\r\n        return {\r\n            isError: true,\r\n            msg: API_NOTIFICATION_MESSAGES.networkError,\r\n            code: \"\"\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst API = {};\r\n\r\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\r\n    API[key] = (body, showUploadProgress, showDownloadProgress) =>\r\n        axiosInstance({\r\n            method: value.method,\r\n            url: value.url,\r\n            data: value.method === 'DELETE' ? {} : body,\r\n            TYPE: getType(value, body),\r\n            onUploadProgress: function(progressEvent) {\r\n                if (showUploadProgress) {\r\n                    let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n                    showUploadProgress(percentCompleted);\r\n                }\r\n            },\r\n            onDownloadProgress: function(progressEvent) {\r\n                if (showDownloadProgress) {\r\n                    let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n                    showDownloadProgress(percentCompleted);\r\n                }\r\n            }\r\n        });\r\n}\r\n\r\nexport { API };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}